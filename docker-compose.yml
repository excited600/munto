services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: munto
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - munto-network
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - munto-network
  server:
    build:
      context: ./nodejs-server
      dockerfile: Dockerfile
    container_name: munto-server
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      IAMPORT_REST_API_KEY: ${IAMPORT_REST_API_KEY}
      IAMPORT_REST_API_SECRET: ${IAMPORT_REST_API_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      REDIS_HOST: ${REDIS_HOST}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - munto-network

  frontend:
    build:
      context: ./react-front
      dockerfile: Dockerfile
    container_name: munto-frontend
    ports:
      - "80:80"
    depends_on:
      - server
    networks:
      - munto-network
  

networks:
  munto-network:
    driver: bridge

volumes:
  postgres_data: 
  redis-data: